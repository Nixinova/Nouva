// root level
start: unit*

// blocks of code
unit: statement | block | control_block | function_decl

block: "{" unit* "}"

control_block: if_block | while_block | for_block
if_block: "if" expression block [else_block]
else_block: "else" [if_block | block]
while_block: "while" expression block
for_block: "for" identifier ":" expression block

function_decl: "function" identifier params_list block

// line of code
statement: [declaration | definition | expression | reassignment] ";"
declaration: var_keyword identifier ["=" expression]
definition: identifier "=" expression
reassignment: identifier reassignment_op expression

// expressions
expression: null | boolean | number | string | range
    | array | map
    | identifier
    | function_invocation
    | array_getter | map_getter
    | typed_expression
    | unary_expression
    | math_expression
    | bitwise_expression
    | logical_expression
    | comparison_expression
    | function_expression | lambda_expression
    | parenth_expression

function_invocation: identifier args_list
array_getter: identifier "[" range "]"
map_getter: identifier "." map_key

typed_expression: identifier ":" expression
unary_expression: ("+" | "-" | "!" | "~") expression
math_expression: expression ("+" | "-") expression
    | expression ("*" | "/") expression
    | expression ("^") expression
bitwise_expression: expression bitwise_op expression
logical_expression: expression logical_op expression
comparison_expression: expression comparison_op expression
parenth_expression: "(" expression ")"
function_expression: "function" params_list block
lambda_expression: params_list "=>" expression

// keywords
var_keyword: "var" | "val"

// atomics
identifier: word_char id_char*

null: "null"

boolean: "true" | "false"

number: digit+ | digit* "." digit+ | based_number
based_number: binary_number | octal_number | hex_number
binary_number: "0b" /[0-1]/+
octal_number: "0o" /[0-8]/+
hex_number: "0x" /[0-9a-fA-F]/+

string: "\"" string_char* "\""

range: expression | expression ".." [expression] | [expression] ".." expression

array: "[" ([number ":"] expression [","])* "]"
map: "{" (map_key ":" expression [","])* "}"

// language shortcut elements
params_list: "(" (identifier [","])* ")"
args_list: "(" (expression [","])* ")"
map_key: identifier | string

// fundamentals
any: /./
digit: /[0-9]/
word_char: /[a-zA-Z_]/
string_char: /[^"]/ | "\\" any
id_char: word_char | digit
reassignment_op: "+=" | "-=" | "*=" | "/="
    | "&=" | "|=" | "#=" | "<<=" | ">>="
    | "&&=" | "||="
bitwise_op: "&" | "|" | "#" | "<<" | ">>"
logical_op: "&&" | "||"
comparison_op: "==" | "!=" | "<" | "<= |" ">" | ">="

// comments
%ignore /\/\/.*/
%ignore /\/\*[\s\S]*\*\//

// ignores
%ignore /\s/
